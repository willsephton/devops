version: "3.2"

services: 
    # http://localhost:8080/
    cli:
        build: ./cli
        image: devops/letsencrypt-docker-compose-cli
        user: ${CURRENT_USER}
        group_add:
        - ${DOCKER_GROUP}
        environment:
        - COMPOSE_PROJECT_NAME
        - CURRENT_USER
        - DOCKER_GROUP
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./:/workdir
        profiles:
        - config

    nginx:
        build: ./nginx
        image: devops/nginx
        environment:
        - DRY_RUN
        volumes:
        - ./config.json:/letsencrypt-docker-compose/config.json:ro
        - ./nginx-conf/nginx.conf:/etc/nginx/nginx.conf:ro
        - ./nginx-conf/conf.d:/etc/nginx/conf.d:ro
        - ./html:/var/www/html:ro
        - nginx_conf_ssl:/etc/nginx/ssl
        - letsencrypt_certs:/etc/letsencrypt
        - certbot_acme_challenge:/var/www/certbot
        ports:
        - "80:80"
        - "443:443"
        healthcheck:
            test: ["CMD", "nc", "-z", "nginx", "80"]
            interval: 30s
            timeout: 30s
            start_period: 30s
            retries: 10
        restart: unless-stopped
        # nginx needs the upstream service to be working 
        depends_on:
            webapp:
            #jetty-backend:
                condition: service_healthy
    
    certbot:
        build: ./certbot
        image: devops/certbot
        environment:
        - DRY_RUN
        volumes:
        - ./config.json:/letsencrypt-docker-compose/config.json:ro
        - letsencrypt_certs:/etc/letsencrypt
        - certbot_acme_challenge:/var/www/certbot
        healthcheck:
            test:
                [
                "CMD-SHELL",
                'test -n "$$(ls -A /etc/letsencrypt/live/)" || test "$$DRY_RUN" == "true" || exit 1',
                ]
            interval: 30s
            timeout: 30s
            start_period: 30s
            retries: 5
        depends_on:
            nginx:
                condition: service_healthy
        restart: unless-stopped
    
    cron:
        build: ./cron
        image: devops/cron
        environment:
        - COMPOSE_PROJECT_NAME
        - DRY_RUN
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./:/workdir:ro
        depends_on:
            certbot:
                condition: service_healthy
        restart: unless-stopped
    
    #jetty-backend:
    webapp:
        image: jetty:10.0.17-jdk11
        ports: 
        - "8080:8080"
        volumes:
        - ./target/spring-boot-leaflet-starter-0.0.1-SNAPSHOT.war:/var/lib/jetty/webapps/root.war
        #build: ./jetty     
        # ports: 
        # - "8080:8080"
        # volumes:
        # - ./target/spring-boot-leaflet-starter-0.0.1-SNAPSHOT.war:/var/lib/jetty/webapps/root.war
        # # setting up log data storage (target is used in log4j2.xml)
        # - data-jetty-logs:/var/lib/jetty/target
        # # setting up data files storage
        # - data-jetty-files:/data-jetty-files
        # # setting up poperties for restsimulator app
        # - ./jetty/start.d/restsimulator.ini:/var/lib/jetty/start.d/restsimulator.ini
            
        # # setting up security for cargo-deployer
        # - ./jetty/webapps/cargo-deployer/WEB-INF/web.xml:/var/lib/jetty/webapps/cargo-deployer/WEB-INF/web.xml
        # - ./jetty/webapps/cargo-deployer/WEB-INF/jetty-web.xml:/var/lib/jetty/webapps/cargo-deployer/WEB-INF/jetty-web.xml
        # - ./jetty/etc/realm.properties:/usr/local/jetty/etc/realm.properties
        healthcheck:
            test: [ "CMD", "curl", "-f", "-I", "http://localhost:8080" ]
            interval: 1m
            timeout: 5s
            retries: 3
volumes:
    data-jetty-files: {}
    data-jetty-logs: {}

    nginx_conf_ssl:
    letsencrypt_certs:
    certbot_acme_challenge:
    
