# example build as part of docker compose https://github.com/zhao-lin-li/docker-compose-build/tree/master

version: "3.2"

services: 
    # http://localhost:8080/
    webapp :
        build: .
        ports: 
        - "8080:8080"
        image: jetty:10.0.17-jdk11
        volumes:
        - ./target/spring-boot-leaflet-starter-0.0.1-SNAPSHOT.war:/var/lib/jetty/webapps/root.war
        healthcheck:
            test: [ "CMD", "curl", "-f", "-I", "localhost:8080" ]
            interval: 1m
            timeout: 5s
            retries: 3
            start_period: 20s
    
    # http://localhost:8080/
    cli:
        build: ./cli
        image: devops/letsencrypt-docker-compose-cli
        user: ${CURRENT_USER}
        group_add:
        - ${DOCKER_GROUP}
        environment:
        - COMPOSE_PROJECT_NAME
        - CURRENT_USER
        - DOCKER_GROUP
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./:/workdir
        profiles:
        - config

    nginx:
        build: ./nginx
        image: nginx:latest
        environment:
        - DRY_RUN
        volumes:
        - ./config.json:/devops/config.json:ro
        - ./nginx-conf/nginx.conf:/etc/nginx/nginx.conf:ro
        - ./nginx-conf/conf.d:/etc/nginx/conf.d:ro
        - ./html:/var/www/html:ro
        - nginx_conf_ssl:/etc/nginx/ssl
        - letsencrypt_certs:/etc/letsencrypt
        - certbot_acme_challenge:/var/www/certbot
        ports:
        - "80:80"
        - "443:443"
        healthcheck:
            test: ["CMD", "nc", "-z", "nginx", "80"]
            interval: 30s
            timeout: 30s
            start_period: 30s
            retries: 10
        restart: unless-stopped
        # nginx needs the upstream service to be working 
        depends_on:
            webapp:
                condition: service_healthy

    certbot:
        build: ./certbot
        image: devops/certbot
        environment:
        - DRY_RUN
        volumes:
        - ./config.json:/devops/config.json:ro
        - letsencrypt_certs:/etc/letsencrypt
        - certbot_acme_challenge:/var/www/certbot
        healthcheck:
            test:
                [
                "CMD-SHELL",
                'test -n "$$(ls -A /etc/letsencrypt/live/)" || test "$$DRY_RUN" == "true" || exit 1',
                ]
            interval: 30s
            timeout: 30s
            start_period: 30s
            retries: 5
        depends_on:
            nginx:
                condition: service_healthy
        restart: unless-stopped
        
    db:
        image: mysql:5.7
        restart: always
        environment:
          MYSQL_DATABASE: 'db'
          MYSQL_USER: 'user'
          MYSQL_PASSWORD: 'password'
          MYSQL_ROOT_PASSWORD: 'password'
        ports:
          # <Port exposed> : <MySQL Port running inside container>
          - '3307:3306'
        expose:
          # Opens port 3307 on the container
          - '3307'
          # Where our data will be persisted
        volumes:
          - my-db:/var/lib/mysql
      
    cron:
        build: ./cron
        image: devops/cron
        environment:
        - COMPOSE_PROJECT_NAME
        - DRY_RUN
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./:/workdir:ro
        depends_on:
            certbot:
                condition: service_healthy
        restart: unless-stopped

    prometheus:
          image: prom/prometheus
          ports:
            - "9090:9090"  # Prometheus web interface port
          volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Mount the Prometheus config file

    mysql-exporter:
          image: prom/mysqld-exporter:v0.13.0
          command:
            - "--collect.global_status"
            - "--collect.global_variables"
            # Add more flags for specific metrics as needed
          ports:
            - "9104:9104"  # Expose exporter's port for Prometheus to scrape
          depends_on:
           - db 
          environment:
            - DATA_SOURCE_NAME=user:password@(db:3306)/database
          
# Names our volume
volumes:
  my-db:
  data-jetty-files: {}
  data-jetty-logs: {}

  nginx_conf_ssl:
  letsencrypt_certs:
  certbot_acme_challenge:
    




## deployer runs on http://localhost:8080/cargo-jetty-deployer/